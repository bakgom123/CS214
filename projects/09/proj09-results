Script started on 2022-03-23 19:04:29-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="271" LINES="17"]
]0;gy24@remotel3: ~/cs214/projects/09/java[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/java[00m$ cat Temperature.java
/*
 * This program convert temperatures in different scales
 * Author: David Yoo (gy24)
 * Date: 03/22/2020
 */


import java.util.Scanner;

class Temperature {
    private char scale;
    private double value;

    private static final char KELVIN = 'K';
    private static final char CELSIUS = 'C';
    private static final char FAHRENHEIT = 'F';
    private static Scanner scanner = new Scanner(System.in);

    // temperature with a value and scale
    // IllegalArgumentException: https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html
    Temperature(double value, char scale) {
        this.scale = Character.toUpperCase(scale);
        this.value = value;
        if (!isScaleValid(this.scale)){
            throw new IllegalArgumentException("Invalid input");
        }
    }

    // return the current value
    double getValue(){ 
        return value; 
    }

    // return the current scale
    char getScale(){
        return scale;
    }


    // convert temperature to Celsius
    Temperature toC(){
        if (scale == KELVIN){
            return new Temperature(value - 273.15, CELSIUS);
        } else if (scale == FAHRENHEIT){
            return new Temperature((value - 32.0) * 5.0 / 9.0, CELSIUS);
        }
        return this;
    }

    // convert temperature to Fahrenheit
    Temperature toF(){
        if (scale == KELVIN){
            return new Temperature((value - 273.15) * 9.0 / 5.0 + 32.0, FAHRENHEIT);
        } else if (scale == CELSIUS){
            return new Temperature((value * 9.0 / 5.0) + 32.0, FAHRENHEIT);
        }
        return this;
    }

    // convert temperature to Kelvin
    Temperature toK(){
        if (scale == CELSIUS){
            return new Temperature(value + 273.15, KELVIN);
        } else if (scale == FAHRENHEIT){
            return new Temperature((value - 32.0) * 5.0 / 9.0 + 273.15, KELVIN);
        }
        return this;
    }

    // convert temperature into another scale
    private static Temperature convertTemp(Temperature temp, char scale) {
        if (temp.scale != scale) {
            if (scale == CELSIUS){
                return temp.toC();
            }  
            else if (scale == KELVIN) {
                return temp.toK();
            }   
            else if (scale == FAHRENHEIT){
                return temp.toF();
            }    
        }
        return temp;
    }


    // An input operation that lets a Temperature be conveniently input as a single entity (e.g., 98.6 F).
    // split: https://www.baeldung.com/string/split
    static Temperature readTemp() {
        String input = scanner.nextLine();
        String[] anArray = input.split(" ");
        if (anArray.length == 0)
            return null;
        float value = Float.parseFloat(anArray[0]);
        char scale = anArray[1].charAt(0);
        return new Temperature(value, scale);
    }

    // An output operation that lets a Temperature be displayed conveniently.
    // formatting: https://docs.oracle.com/javase/tutorial/java/data/numberformat.html
    void print() {
	    System.out.printf("%.3f %c", value, scale);
    }

    // given a Temperature and real degrees, returns a Temperature that is degrees higher than the Temperature received.
    Temperature raise(float degrees) {
	    return new Temperature(value + degrees, scale);
    }

    // given a Temperature and a real degrees, returns a Temperature that is degrees lower than the Temperature received.
    Temperature lower(float degrees) {
	    return new Temperature(value - degrees, scale);
    }

    // given two Temperature operands, returns true if and only if the left operand is equal to the right operand.
    boolean equals(Temperature temp) {
	    return convertTemp(temp, scale).value == value;
    }

    // given two Temperature operands, returns true if and only if the left operand is less-than the right operand.
    boolean lessThan(Temperature temp) {
	    return value < convertTemp(temp, scale).value;
    }


    // check if the scale is valid
    private static boolean isScaleValid(char scale) {
        char upperCased = Character.toUpperCase(scale);
        return upperCased == KELVIN || upperCased == CELSIUS || upperCased == FAHRENHEIT;
    }
}]0;gy24@remotel3: ~/cs214/projects/09/java[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/java[00m$ cat TemperatureTester.java
/*
 * Tester for Temperature.java, and it also contains main function
 * Author: David Yoo (gy24)
 * Date: 03/23/2020
 */
import java.util.Scanner;
class TemperatureTester {
    public static void main(String[] args) {
	System.out.println("Temperature examples:");
	System.out.println("\t20.5 C");
	System.out.println("\t10 K");
	System.out.println("\t35.1 F");
	System.out.print("Please enter a start temperature: ");
	Temperature startTemp = Temperature.readTemp();
	while (startTemp == null) {
	    System.out.print("Invalid input, please enter a valid input: ");
	    startTemp = Temperature.readTemp();
	}
	System.out.print("Please enter a stop temperature: ");
	Temperature stopTemp = Temperature.readTemp();
	while (stopTemp == null) {
	    System.out.print("Invalid input, please enter a valid input: ");
	    stopTemp = Temperature.readTemp();
	}
        
	Scanner scanner = new Scanner(System.in);
	String stepString = "";
	float amount = 0;
	boolean hasStep = false;
	int i = 0;
	while (!hasStep) {
	    if (i == 0)
			System.out.print("Please enter a step amount of degrees: ");
	    else
			System.out.print("Invalid input, please enter a valid input: ");
	    try {
			stepString = scanner.nextLine();
			amount = Float.parseFloat(stepString);
			hasStep = true;
	    } catch (NumberFormatException e) {	}
	    i++;
	}
	scanner.close();

	if (startTemp.equals(stopTemp)) {
	    System.out.println("Start and stop temperatures are equal.");
	    return;
	}

	Temperature current = startTemp;
	while (true) {
	    if (startTemp.lessThan(stopTemp) != current.lessThan(stopTemp) && !current.equals(stopTemp))
		break;

	    current.toF().print();
	    System.out.print("\t\t");
	    current.toC().print();
	    System.out.print("\t\t");
	    current.toK().print();
	    System.out.println();

	    if (startTemp.lessThan(stopTemp))
			current = current.raise(amount);
	    else
			current = current.lower(amount);
	}
	}	
}]0;gy24@remotel3: ~/cs214/projects/09/java[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/java[00m$ javac -deprecation Temperature.java
]0;gy24@remotel3: ~/cs214/projects/09/java[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/java[00m$ javac -deep[K[Ke[Kprecation TemperatureTester.java
]0;gy24@remotel3: ~/cs214/projects/09/java[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/java[00m$ java TemperatureTester
Temperature examples:
	20.5 C
	10 K
	35.1 F
Please enter a start temperature: 0 F
Please enter a stop temperature: 100 C
Please enter a step amount of degrees: 2.5
0.000 F		-17.778 C		255.372 K
2.500 F		-16.389 C		256.761 K
5.000 F		-15.000 C		258.150 K
7.500 F		-13.611 C		259.539 K
10.000 F		-12.222 C		260.928 K
12.500 F		-10.833 C		262.317 K
15.000 F		-9.444 C		263.706 K
17.500 F		-8.056 C		265.094 K
20.000 F		-6.667 C		266.483 K
22.500 F		-5.278 C		267.872 K
25.000 F		-3.889 C		269.261 K
27.500 F		-2.500 C		270.650 K
30.000 F		-1.111 C		272.039 K
32.500 F		0.278 C		273.428 K
35.000 F		1.667 C		274.817 K
37.500 F		3.056 C		276.206 K
40.000 F		4.444 C		277.594 K
42.500 F		5.833 C		278.983 K
45.000 F		7.222 C		280.372 K
47.500 F		8.611 C		281.761 K
50.000 F		10.000 C		283.150 K
52.500 F		11.389 C		284.539 K
55.000 F		12.778 C		285.928 K
57.500 F		14.167 C		287.317 K
60.000 F		15.556 C		288.706 K
62.500 F		16.944 C		290.094 K
65.000 F		18.333 C		291.483 K
67.500 F		19.722 C		292.872 K
70.000 F		21.111 C		294.261 K
72.500 F		22.500 C		295.650 K
75.000 F		23.889 C		297.039 K
77.500 F		25.278 C		298.428 K
80.000 F		26.667 C		299.817 K
82.500 F		28.056 C		301.206 K
85.000 F		29.444 C		302.594 K
87.500 F		30.833 C		303.983 K
90.000 F		32.222 C		305.372 K
92.500 F		33.611 C		306.761 K
95.000 F		35.000 C		308.150 K
97.500 F		36.389 C		309.539 K
100.000 F		37.778 C		310.928 K
102.500 F		39.167 C		312.317 K
105.000 F		40.556 C		313.706 K
107.500 F		41.944 C		315.094 K
110.000 F		43.333 C		316.483 K
112.500 F		44.722 C		317.872 K
115.000 F		46.111 C		319.261 K
117.500 F		47.500 C		320.650 K
120.000 F		48.889 C		322.039 K
122.500 F		50.278 C		323.428 K
125.000 F		51.667 C		324.817 K
127.500 F		53.056 C		326.206 K
130.000 F		54.444 C		327.594 K
132.500 F		55.833 C		328.983 K
135.000 F		57.222 C		330.372 K
137.500 F		58.611 C		331.761 K
140.000 F		60.000 C		333.150 K
142.500 F		61.389 C		334.539 K
145.000 F		62.778 C		335.928 K
147.500 F		64.167 C		337.317 K
150.000 F		65.556 C		338.706 K
152.500 F		66.944 C		340.094 K
155.000 F		68.333 C		341.483 K
157.500 F		69.722 C		342.872 K
160.000 F		71.111 C		344.261 K
162.500 F		72.500 C		345.650 K
165.000 F		73.889 C		347.039 K
167.500 F		75.278 C		348.428 K
170.000 F		76.667 C		349.817 K
172.500 F		78.056 C		351.206 K
175.000 F		79.444 C		352.594 K
177.500 F		80.833 C		353.983 K
180.000 F		82.222 C		355.372 K
182.500 F		83.611 C		356.761 K
185.000 F		85.000 C		358.150 K
187.500 F		86.389 C		359.539 K
190.000 F		87.778 C		360.928 K
192.500 F		89.167 C		362.317 K
195.000 F		90.556 C		363.706 K
197.500 F		91.944 C		365.094 K
200.000 F		93.333 C		366.483 K
202.500 F		94.722 C		367.872 K
205.000 F		96.111 C		369.261 K
207.500 F		97.500 C		370.650 K
210.000 F		98.889 C		372.039 K
]0;gy24@remotel3: ~/cs214/projects/09/java[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/java[00m$ exit

Script done on 2022-03-23 19:05:16-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-23 19:39:58-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="271" LINES="17"]
]0;gy24@remotel3: ~/cs214/projects/09/ada[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/ada[00m$ cat temperature_package.adb
-- temperature_package.adb defines operations for the Temperature type.
-- Author: David Yoo (gy24)
-- Date: 03/23/2020

with Ada.Text_IO, Ada.Float_Text_IO, Ada.Characters.Handling;
use Ada.Text_IO, Ada.Float_Text_IO, Ada.Characters.Handling;

package body Temperature_Package is
   -- initialize a Temperature
   procedure Init(Temp: out Temperature; Value: in Float; Scale: in Character) is
   begin
      if not Is_Scale_Valid(Scale) then
         Put("Invalid scale");
         return;
      end if;
      
      Temp.Value := Value;
      Temp.Scale := To_Upper(Scale);
   end Init;
   
   -- get the value
   function Get_Value(Temp: in Temperature) return Float is
   begin
      return Temp.Value;
   end Get_Value;
   
   -- get the scale
   function Get_Scale(Temp: in Temperature) return Character is
   begin
      return Temp.Scale;
   end Get_Scale;
   
   -- convert to Celsius
   function toC(Temp: in Temperature) return Temperature is
      TempN: Temperature;
   begin
      if CheckKelvin(Temp.Scale) then
         Init(TempN, ConvertFromK(Temp.Value, CELSIUS), CELSIUS);
      elsif CheckFahrenheit(Temp.Scale) then
         Init(TempN, ConvertFromF(Temp.Value, CELSIUS), CELSIUS);
      else
         return Temp;
      end if;
      return TempN;
   end toC;

   -- convert to Fahrenheit
   function toF(Temp: in Temperature) return Temperature is
      TempN: Temperature;
   begin
      if CheckKelvin(Temp.Scale) then
         Init(TempN, ConvertFromK(Temp.Value, FAHRENHEIT), FAHRENHEIT);
      elsif CheckCelsius(Temp.Scale) then
         Init(TempN, ConvertFromC(Temp.Value, FAHRENHEIT), FAHRENHEIT);
      else
         return Temp;
      end if;
      return TempN;
   end toF;

   -- convert to Kelvin
   function toK(Temp: in Temperature) return Temperature is
      TempN: Temperature;
   begin
      if CheckCelsius(Temp.Scale) then
         Init(TempN, ConvertFromC(Temp.Value, KELVIN), KELVIN);
      elsif CheckFahrenheit(Temp.Scale) then
         Init(TempN, ConvertFromF(Temp.Value, KELVIN), KELVIN);
      else
         return Temp;
      end if;
      return TempN;
   end toK;

   -- An input operation that lets a Temperature be conveniently input as a single entity (e.g., 98.6 F).
   function Read_Temp(Error: out Boolean) return Temperature is
      Line: String(1 .. 20);
      Last_Index: Natural;
      Value: Float;
      Scale: Character;
      Temp: Temperature;
   begin
      Get_Line(Line, Last_Index);
   
      begin
         Value := Float'Value(Line(Line'First .. Last_Index - 2));
      exception
         when Constraint_Error =>
            Error := True;
            return Temp;
      end;
   
      Scale := Line(Last_Index);
      if not Is_Scale_Valid(Scale) Then
         Error := True;
         return Temp;
      end if;
   
      Error := False;
      Init(Temp, Value, Scale);
      return Temp;
   end Read_Temp;
   
   -- read the degrees
   function Read_Degrees(Error: out Boolean) return Float is
      Line: String(1 .. 20);
      Last_Index: Natural;
      Value: Float;
   begin
      Get_Line(Line, Last_Index);
   
      begin
         Value := Float'Value(Line(Line'First .. Last_Index));
      exception
         when Constraint_Error =>
            Error := True;
            return Value;
      end;
      return Value;
   end;

-- An output operation that lets a Temperature be displayed conveniently.
   procedure Put(Temp: in Temperature) is
   begin
      Put(Temp.Value, 1, 3, 0);
      Put(' ');
      Put(Temp.Scale);
   end Put;
   
   -- given a Temperature and real degrees, returns a Temperature that is degrees higher than the Temperature received.
   function RaiseIt(Temp: in Temperature; Degrees: in Float) return Temperature is
      TempN: Temperature;
   begin
      Init(TempN, Temp.Value + Degrees, Temp.Scale);
      return TempN;
   end RaiseIt;
   
   -- given a Temperature and a real degrees, returns a Temperature that is degrees lower than the Temperature received. 
   function Lower(Temp: in Temperature; Degrees: in Float) return Temperature is
      TempN: Temperature;
   begin
      Init(TempN, Temp.Value - Degrees, Temp.Scale);
      return TempN;
   end Lower;
   
   -- given two Temperature operands, returns true if and only if the left operand is equal to the right operand.
   function Equals(Temp1, Temp2: in Temperature) return Boolean is
      Converted_Temp: Temperature := Temp2;
   begin
      if Temp2.Scale /= Temp1.Scale then
         Converted_Temp := Convert_T(Temp2, Temp1.Scale);
      end if;
      return Temp1.Value = Converted_Temp.Value;
   end Equals;
   
   -- given two Temperature operands, returns true if and only if the left operand is less-than the right operand. 
   function Less_Than(Temp1, Temp2: in Temperature) return Boolean is
      Converted_Temp: Temperature := Temp2;
   begin
      if Temp2.Scale /= Temp1.Scale then
         Converted_Temp := Convert_T(Temp2, Temp1.Scale);
      end if;
      return Temp1.Value < Converted_Temp.Value;
   end Less_Than;
   
   -- convert temperature into another scale
   function Convert_T(Temp: in Temperature; Scale: in Character) return Temperature is
   begin
      if Temp.Scale = Scale then
         return Temp;
      elsif CheckKelvin(Scale) then
         return toK(Temp);
      elsif CheckCelsius(Scale) then
         return toC(Temp);
      elsif CheckFahrenheit(Scale) then
         return toF(Temp);
      else
         Put("Invalid input"); New_Line;
         return Temp;
      end if;
   end Convert_T;
   
   -- convert from celsius
   function ConvertFromC(Value_Celsius: in Float; Scale: in Character) return Float is
   begin
      if CheckFahrenheit(Scale) then
         return (Value_Celsius * 9.0 / 5.0) + 32.0;
      elsif CheckKelvin(Scale) then
         return Value_Celsius + 273.15;
      else
         Put("Invalid input");
         return 0.0;
      end if;
   end ConvertFromC;
   
   -- convert from Kelvin
   function ConvertFromK(Value_Kelvin: in Float; Scale: in Character) return Float is
      In_Celsius: Float := Value_Kelvin - 273.15;
   begin
      if CheckCelsius(Scale) then
         return In_Celsius;
      elsif CheckFahrenheit(Scale) then
         return ConvertFromC(In_Celsius, FAHRENHEIT);
      else
         Put("Invalid scale provided for ConvertFromK. Options are: F,f,C,c");
         return 0.0;
      end if;
   end ConvertFromK;
   
   -- convert from Fahrenheit
   function ConvertFromF(Value_Fahrenheit: in Float; Scale: in Character) return Float is
      In_Celsius: Float := (Value_Fahrenheit - 32.0) * 5.0 / 9.0;
   begin
      if CheckCelsius(Scale) then
         return In_Celsius;
      elsif CheckKelvin(Scale) then
         return ConvertFromC(In_Celsius, KELVIN);
      else
         Put("Invalid input");
         return 0.0;
      end if;
   end ConvertFromF;
   
   -- check if the temperature is in Celsius
   function CheckCelsius(Scale: in Character) return Boolean is
   begin
      return Scale = 'c' or Scale = 'C';
   end CheckCelsius;
   
   -- check if the temperature is in Fahrenheit.
   function CheckFahrenheit(Scale: in Character) return Boolean is
   begin
      return Scale = 'f' or Scale = 'F';
   end CheckFahrenheit;
   
   -- check if the temperature is in Kelvin.
   function CheckKelvin(Scale: in Character) return Boolean is
   begin
      return Scale = 'k' or Scale = 'K';
   end CheckKelvin;
   
   -- check the scale is valid
   function Is_Scale_Valid(Scale: in Character) return Boolean is
   begin
      if not CheckKelvin(Scale) and not CheckCelsius(Scale) and not CheckFahrenheit(Scale) then
         return False;
      else
         return True;
      end if;
   end Is_Scale_Valid;

end Temperature_Package;]0;gy24@remotel3: ~/cs214/projects/09/ada[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/ada[00m$ cat temperature_package.adb[K[K[Kads
-- temperature_package.ads declares the Temperature type and its operations.
-- Author: David Yoo (gy24)
-- Date: 03/23/2020
package Temperature_Package is
   type Temperature is private;
   
   -- initialize a Temperature
   procedure Init(Temp: out Temperature; Value: in Float; Scale: in Character);
   
   -- get the value
   function Get_Value(Temp: in Temperature) 
   return Float;
   
   -- get the scale
   function Get_Scale(Temp: in Temperature) 
   return Character;

   -- convert to Celcius
   function ToC(Temp: in Temperature) 
   return Temperature;

   -- convert to Fahrenheit.
   function ToF(Temp: in Temperature) 
   return Temperature;

   -- convert to Kelvin
   function ToK(Temp: in Temperature) 
   return Temperature;
    
   -- An input operation that lets a Temperature be conveniently input as a single entity (e.g., 98.6 F).
   function Read_Temp(Error: out Boolean) 
   return Temperature;

   -- read the degrees
   function Read_Degrees(Error: out Boolean) 
   return Float;
   
   -- An output operation that lets a Temperature be displayed conveniently.
   procedure Put(Temp: in Temperature);

   -- given a Temperature and real degrees, returns a Temperature that is degrees higher than the Temperature received.
   function RaiseIt(Temp: in Temperature; Degrees: in Float) 
   return Temperature;

   -- given a Temperature and a real degrees, returns a Temperature that is degrees lower than the Temperature received. 
   function Lower(Temp: in Temperature; Degrees: in Float) 
   return Temperature;

   -- given two Temperature operands, returns true if and only if the left operand is equal to the right operand.
   function Equals(Temp1, Temp2: in Temperature) 
   return Boolean;

   -- given two Temperature operands, returns true if and only if the left operand is less-than the right operand. 
   function Less_Than(Temp1, Temp2: in Temperature) 
   return Boolean;
   
private
    KELVIN: constant Character := 'K';
    CELSIUS: constant Character := 'C';
    FAHRENHEIT: constant Character := 'F';
   
   -- convert from celsius
   function ConvertFromC(Value_Celsius: in Float; Scale: in Character) 
   return Float;

   -- convert from Kelvin
   function ConvertFromK(Value_Kelvin: in Float; Scale: in Character) 
   return Float;

   -- convert from Fahrenheit
   function ConvertFromF(Value_Fahrenheit: in Float; Scale: in Character) 
   return Float;
   
   -- check the scale is valid
   function Is_Scale_Valid(Scale: in Character) 
   return Boolean;

   -- check if the temperature is in Celsius
   function CheckCelsius(Scale: in Character) 
   return Boolean;

   -- check if the temperature is in Fahrenheit.
   function CheckFahrenheit(Scale: in Character) 
   return Boolean;

   -- check if the temperature is in Kelvin.
   function CheckKelvin(Scale: in Character) 
   return Boolean;

   -- convert temperature into another scale
   function Convert_T(Temp: in Temperature; Scale: in Character) 
   return Temperature;
   
   type Temperature is
      record
         Value: Float;
         Scale: Character;
      end record;
	 
end Temperature_Package;]0;gy24@remotel3: ~/cs214/projects/09/ada[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/ada[00m$ cat temperature_package.ads[K[K[K[K[K[K[K[K[K[K[K[K_tester.adb
-- Tester of temperature package, and it has the main function
-- Author: David Yoo (gy24)
-- Date: 03/23/2020

with Ada.Text_IO, Ada.Float_Text_IO, Temperature_Package;
use Ada.Text_IO, Ada.Float_Text_IO, Temperature_Package;

procedure Temperature_Tester is
   Start: Temperature_Package.Temperature;
   Stop: Temperature_Package.Temperature;
   Step: Float;
   Error: Boolean := False;
   Current: Temperature_Package.Temperature;
begin
   Put("Temperature examples:"); New_Line;
   Put("20.5 C"); New_Line;
   Put("10 K"); New_Line;
   Put("35.1 F"); New_Line;
   Put("Please enter a start temperature: ");
   Start := Temperature_Package.Read_Temp(Error);
   while Error loop
      Put("Invalid input, please enter a valid input: ");
      Start := Temperature_Package.Read_Temp(Error);
   end loop;

   Put("Please enter a stop temperature: ");
   Stop := Temperature_Package.Read_Temp(Error);
   while Error loop
      Put("Invalid input, please enter a valid input: ");
      Stop := Temperature_Package.Read_Temp(Error);
   end loop;

   Put("Please enter a step amount of degrees: ");
   Step := Temperature_Package.Read_Degrees(Error);
   while Error loop
      Put("Invalid input, please enter a valid input: ");
      Step := Temperature_Package.Read_Degrees(Error);
   end loop;
   
   if Temperature_Package.Equals(Start, Stop) then
      Put("Start and stop temperatures are equal");
      New_Line;
      return;
   end if;

   Current := Start;
   Table:
      loop
         if Temperature_Package.Less_Than(Start, Stop) /= Temperature_Package.Less_Than(Current, Stop) and not Temperature_Package.Equals(Current, Stop) then
            exit Table;
         end if;

         if Temperature_Package.Less_Than(Start, Stop) then
            Current := Temperature_Package.RaiseIt(Current, Step);
         else
            Current := Temperature_Package.Lower(Current, Step);
         end if;

      -- set_col: https://stackoverflow.com/questions/9876568/how-to-read-some-specific-columns-in-a-file
         set_col(1);
         Put(Temperature_Package.ToF(Current));
         set_col(17);
         Put(Temperature_Package.ToC(Current));
         set_col(32);
         Put(Temperature_Package.TOK(Current));
         New_Line;
         
      end loop Table;

end Temperature_Tester;]0;gy24@remotel3: ~/cs214/projects/09/ada[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/ada[00m$ cat temperature_tester.adbpackage.adsblojure -m temperature_tester[3Pat temperature_tester.cljlojure -m temperature_tester[2Pat temperature_package.adbs[1Ptester.adb[Kgnatmake temperature_tester
x86_64-linux-gnu-gcc-7 -c temperature_tester.adb
x86_64-linux-gnu-gnatbind-7 -x temperature_tester.ali
x86_64-linux-gnu-gnatlink-7 temperature_tester.ali
]0;gy24@remotel3: ~/cs214/projects/09/ada[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/ada[00m$ ./temperature_tester
Temperature examples:
20.5 C
10 K
35.1 F
Please enter a start temperature: 0 F
Please enter a stop temperature: 100 C
Please enter a step amount of degrees: 2.5

2.500 F         -16.389 C      256.761 K
5.000 F         -15.000 C      258.150 K
7.500 F         -13.611 C      259.539 K
10.000 F        -12.222 C      260.928 K
12.500 F        -10.833 C      262.317 K
15.000 F        -9.444 C       263.706 K
17.500 F        -8.056 C       265.094 K
20.000 F        -6.667 C       266.483 K
22.500 F        -5.278 C       267.872 K
25.000 F        -3.889 C       269.261 K
27.500 F        -2.500 C       270.650 K
30.000 F        -1.111 C       272.039 K
32.500 F        0.278 C        273.428 K
35.000 F        1.667 C        274.817 K
37.500 F        3.056 C        276.206 K
40.000 F        4.444 C        277.594 K
42.500 F        5.833 C        278.983 K
45.000 F        7.222 C        280.372 K
47.500 F        8.611 C        281.761 K
50.000 F        10.000 C       283.150 K
52.500 F        11.389 C       284.539 K
55.000 F        12.778 C       285.928 K
57.500 F        14.167 C       287.317 K
60.000 F        15.556 C       288.706 K
62.500 F        16.944 C       290.094 K
65.000 F        18.333 C       291.483 K
67.500 F        19.722 C       292.872 K
70.000 F        21.111 C       294.261 K
72.500 F        22.500 C       295.650 K
75.000 F        23.889 C       297.039 K
77.500 F        25.278 C       298.428 K
80.000 F        26.667 C       299.817 K
82.500 F        28.056 C       301.206 K
85.000 F        29.444 C       302.594 K
87.500 F        30.833 C       303.983 K
90.000 F        32.222 C       305.372 K
92.500 F        33.611 C       306.761 K
95.000 F        35.000 C       308.150 K
97.500 F        36.389 C       309.539 K
100.000 F       37.778 C       310.928 K
102.500 F       39.167 C       312.317 K
105.000 F       40.556 C       313.706 K
107.500 F       41.944 C       315.094 K
110.000 F       43.333 C       316.483 K
112.500 F       44.722 C       317.872 K
115.000 F       46.111 C       319.261 K
117.500 F       47.500 C       320.650 K
120.000 F       48.889 C       322.039 K
122.500 F       50.278 C       323.428 K
125.000 F       51.667 C       324.817 K
127.500 F       53.056 C       326.206 K
130.000 F       54.444 C       327.594 K
132.500 F       55.833 C       328.983 K
135.000 F       57.222 C       330.372 K
137.500 F       58.611 C       331.761 K
140.000 F       60.000 C       333.150 K
142.500 F       61.389 C       334.539 K
145.000 F       62.778 C       335.928 K
147.500 F       64.167 C       337.317 K
150.000 F       65.556 C       338.706 K
152.500 F       66.944 C       340.094 K
155.000 F       68.333 C       341.483 K
157.500 F       69.722 C       342.872 K
160.000 F       71.111 C       344.261 K
162.500 F       72.500 C       345.650 K
165.000 F       73.889 C       347.039 K
167.500 F       75.278 C       348.428 K
170.000 F       76.667 C       349.817 K
172.500 F       78.056 C       351.206 K
175.000 F       79.444 C       352.594 K
177.500 F       80.833 C       353.983 K
180.000 F       82.222 C       355.372 K
182.500 F       83.611 C       356.761 K
185.000 F       85.000 C       358.150 K
187.500 F       86.389 C       359.539 K
190.000 F       87.778 C       360.928 K
192.500 F       89.167 C       362.317 K
195.000 F       90.556 C       363.706 K
197.500 F       91.944 C       365.094 K
200.000 F       93.333 C       366.483 K
202.500 F       94.722 C       367.872 K
205.000 F       96.111 C       369.261 K
207.500 F       97.500 C       370.650 K
210.000 F       98.889 C       372.039 K
212.500 F       100.278 C      373.428 K
]0;gy24@remotel3: ~/cs214/projects/09/ada[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/ada[00m$ ^C
]0;gy24@remotel3: ~/cs214/projects/09/ada[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/ada[00m$ exit

Script done on 2022-03-23 19:41:04-04:00 [COMMAND_EXIT_CODE="130"]
Script started on 2022-03-23 19:45:25-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="271" LINES="17"]
]0;gy24@remotel3: ~/cs214/projects/09/clojure[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/clojure[00m$ cat temperature.clj
;; functions for temperature conversion
;; Author: David Yoo (gy24)
;; Date: 03/22/2022

(require '[clojure.string :as str])

(defrecord Temperature [degree scale])

;; defining the constant: https://stackoverflow.com/questions/9162558/how-does-clojure-const-work
(def ^:const celsius \C)
(def ^:const fahrenheit \F)
(def ^:const kelvin \K)

;; change to uppercase
;; https://clojuredocs.org/clojure.string/upper-case
(defn toUpper [chr]
  (nth (char-array (clojure.string/upper-case chr)) 0)
)

;; check if the scale is valid
(defn is-scale-valid? [scale]
  (let [upper (toUpper scale)]
    (or (= upper celsius) (= upper kelvin) (= upper fahrenheit))
    )
)

;; check if a string is numeric
(defn isNumeric [str]
  (try
     (do
       (Float/parseFloat str)
       true)
     (catch NumberFormatException e false))
)

;; temperature with a degree and scale
(defn initial [degree scale]
  (if (is-scale-valid? scale)
    (->Temperature degree (toUpper scale))
    (println "Invalid scale provided to initial."))
)

;; get the degrees of the temperature
(defn getTemp [^Temperature temp]
  (:degree temp)
)

;; get the scale
(defn getScale [^Temperature temp]
  (:scale temp)
)

;; convert a temperature to Celsius
(defn toC [^Temperature temp]
  (if (= kelvin (getScale temp))
    (initial (- (getTemp temp) 273.15) celsius)
    (if (= fahrenheit (getScale temp))
      (initial (* (/ 5.0 9.0) (- (getTemp temp) 32)) celsius)
      temp))
)

;; convert a temperature to Fahrenheit
(defn toF [^Temperature temp]
  (if (= kelvin (getScale temp))
    (initial (+ 32 (* (/ 9.0 5.0) (- (getTemp temp) 273.15))) fahrenheit)
    (if (= celsius (getScale temp))
      (initial (+ 32 (* (/ 9.0 5.0) (getTemp temp))) fahrenheit)
      temp))
)

;; convert a temperature to Kelvin
(defn toK [^Temperature temp]
  (if (= celsius (getScale temp))
    (initial (+ (getTemp temp) 273.15) kelvin)
    (if (= fahrenheit (getScale temp))
      (initial (+ (* (/ 5.0 9.0) (- (getTemp temp) 32.0)) 273.15) kelvin)
      temp))
)

;; convert temperature into another scale
(defn convert-temp [temp scale]
  (if (= scale (getScale temp))
    temp
    (if (= scale celsius)
      (toC temp)
      (if (= scale kelvin)
        (toK temp)
        (if (= scale fahrenheit)
          (toF temp)
          ()))))
)

;; An input operation that lets a Temperature be conveniently input as a single entity (e.g., 98.6 F).
(defn read-temperature []
  (let [line (read-line)
        parts (str/split line #" ")]
    (if (= 2 (count parts))
      (let [value-in-string (nth parts 0)
            scale-in-string (nth parts 1)
            scale-char (nth (char-array scale-in-string) 0)]
        (if (= (count scale-in-string) 1)
          (if (is-scale-valid? scale-char)
            (if (isNumeric value-in-string)
              [(initial (Float/parseFloat value-in-string) scale-char) false]
              [nil true])
            [nil true])
          [nil true]))
      [nil true]))
)

;; returns the temperature in a string
(defn to-string [^Temperature temp]
  (str (format "%.3f" (getTemp temp)) " " (getScale temp))
)

;; given a Temperature and real degrees, returns a Temperature that is degrees higher than the Temperature received.
(defn raise [temp amount]
  (initial (+ amount (getTemp temp)) (getScale temp))
)

;; given a Temperature and a real degrees, returns a Temperature that is degrees lower than the Temperature received. 
(defn lower [temp amount]
  (initial (- (getTemp temp) amount) (getScale temp))
)

;; given two Temperature operands, returns true if and only if the left operand is equal to the right operand.
(defn equals? [temp1 temp2]
 (= (getTemp temp1) (getTemp (convert-temp temp2 (getScale temp1))))
)

;; given two Temperature operands, returns true if and only if the left operand is less-than the right operand. 
(defn less-than? [temp1 temp2]
 (< (getTemp temp1) (getTemp (convert-temp temp2 (getScale temp1))))
)

]0;gy24@remotel3: ~/cs214/projects/09/clojure[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/clojure[00m$ cat tremp[K[K[K[Kemperature_tester.clj
;; Test the temperature.clj, and it contains the main function of tmeperature.clj
;; Author: David Yoo (gy24)
;; Date: 03/22/2022


(ns temperature_tester)

(load-file "temperature.clj")

;; read the temperature from the user
(defn readTemp [message]
  (do
    (println message)
    (let [[temp error] (read-temperature)]
      (if error
        (readTemp "Invalid input, please enter a valid input: ") 
        temp
      )
    )
  )
)

;; read a number from the user
(defn readNum [message]
  (do
    (println message)
    (let [line (read-line)]
      (if (isNumeric line)
        (Float/parseFloat line)
        (readNum "Invalid input, please enter a valid input: ")
      )
    )
  )
)

;; table of temperatures
;; format: https://livebook.manning.com/book/clojure-the-essential-reference/chapter-18/v-30/
(defn tempTable [current stop step steps start-is-lower]
  (let [f (format "%-20s" (to-string (toF current)))
        c (format "%-20s" (to-string (toC current)))
        k (format "%-20s" (to-string (toK current)))]
    (if (or (= start-is-lower (less-than? current stop)) (equals? current stop))
      (do
        (println (str f c k))
        (tempTable (steps current step) stop step steps start-is-lower))
    )
  )
)

;; main function
(defn -main []
  (do
    (println """Temperature examples:
    20.5 C
    10 K
    35.1 F""")
    (let [startTemp (readTemp "Please enter a start temperature: ")
          stopTemp (readTemp "Please enter a stop temperature: ")
          step (readNum "Please enter a step amount of degrees: ")]
      (if (equals? startTemp stopTemp)
        (println "Start and stop temperatures are equal.")
        (let [start-is-lower (less-than? startTemp stopTemp)]
          (if start-is-lower
            (tempTable startTemp stopTemp step raise start-is-lower)
            (tempTable startTemp stopTemp step lower start-is-lower)
          )
        )
      )
    )
  )         
)]0;gy24@remotel3: ~/cs214/projects/09/clojure[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/clojure[00m$ clojure -m temperature_tester
 Temperature examples:
    20.5 C
    10 K
    35.1 F 
Please enter a start temperature: 
0 F
Please enter a stop temperature: 
100 C
Please enter a step amount of degrees: 
2.5
0.000 F             -17.778 C           255.372 K           
2.500 F             -16.389 C           256.761 K           
5.000 F             -15.000 C           258.150 K           
7.500 F             -13.611 C           259.539 K           
10.000 F            -12.222 C           260.928 K           
12.500 F            -10.833 C           262.317 K           
15.000 F            -9.444 C            263.706 K           
17.500 F            -8.056 C            265.094 K           
20.000 F            -6.667 C            266.483 K           
22.500 F            -5.278 C            267.872 K           
25.000 F            -3.889 C            269.261 K           
27.500 F            -2.500 C            270.650 K           
30.000 F            -1.111 C            272.039 K           
32.500 F            0.278 C             273.428 K           
35.000 F            1.667 C             274.817 K           
37.500 F            3.056 C             276.206 K           
40.000 F            4.444 C             277.594 K           
42.500 F            5.833 C             278.983 K           
45.000 F            7.222 C             280.372 K           
47.500 F            8.611 C             281.761 K           
50.000 F            10.000 C            283.150 K           
52.500 F            11.389 C            284.539 K           
55.000 F            12.778 C            285.928 K           
57.500 F            14.167 C            287.317 K           
60.000 F            15.556 C            288.706 K           
62.500 F            16.944 C            290.094 K           
65.000 F            18.333 C            291.483 K           
67.500 F            19.722 C            292.872 K           
70.000 F            21.111 C            294.261 K           
72.500 F            22.500 C            295.650 K           
75.000 F            23.889 C            297.039 K           
77.500 F            25.278 C            298.428 K           
80.000 F            26.667 C            299.817 K           
82.500 F            28.056 C            301.206 K           
85.000 F            29.444 C            302.594 K           
87.500 F            30.833 C            303.983 K           
90.000 F            32.222 C            305.372 K           
92.500 F            33.611 C            306.761 K           
95.000 F            35.000 C            308.150 K           
97.500 F            36.389 C            309.539 K           
100.000 F           37.778 C            310.928 K           
102.500 F           39.167 C            312.317 K           
105.000 F           40.556 C            313.706 K           
107.500 F           41.944 C            315.094 K           
110.000 F           43.333 C            316.483 K           
112.500 F           44.722 C            317.872 K           
115.000 F           46.111 C            319.261 K           
117.500 F           47.500 C            320.650 K           
120.000 F           48.889 C            322.039 K           
122.500 F           50.278 C            323.428 K           
125.000 F           51.667 C            324.817 K           
127.500 F           53.056 C            326.206 K           
130.000 F           54.444 C            327.594 K           
132.500 F           55.833 C            328.983 K           
135.000 F           57.222 C            330.372 K           
137.500 F           58.611 C            331.761 K           
140.000 F           60.000 C            333.150 K           
142.500 F           61.389 C            334.539 K           
145.000 F           62.778 C            335.928 K           
147.500 F           64.167 C            337.317 K           
150.000 F           65.556 C            338.706 K           
152.500 F           66.944 C            340.094 K           
155.000 F           68.333 C            341.483 K           
157.500 F           69.722 C            342.872 K           
160.000 F           71.111 C            344.261 K           
162.500 F           72.500 C            345.650 K           
165.000 F           73.889 C            347.039 K           
167.500 F           75.278 C            348.428 K           
170.000 F           76.667 C            349.817 K           
172.500 F           78.056 C            351.206 K           
175.000 F           79.444 C            352.594 K           
177.500 F           80.833 C            353.983 K           
180.000 F           82.222 C            355.372 K           
182.500 F           83.611 C            356.761 K           
185.000 F           85.000 C            358.150 K           
187.500 F           86.389 C            359.539 K           
190.000 F           87.778 C            360.928 K           
192.500 F           89.167 C            362.317 K           
195.000 F           90.556 C            363.706 K           
197.500 F           91.944 C            365.094 K           
200.000 F           93.333 C            366.483 K           
202.500 F           94.722 C            367.872 K           
205.000 F           96.111 C            369.261 K           
207.500 F           97.500 C            370.650 K           
210.000 F           98.889 C            372.039 K           
]0;gy24@remotel3: ~/cs214/projects/09/clojure[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/clojure[00m$ exit

Script done on 2022-03-23 19:45:57-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-23 19:44:39-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="271" LINES="17"]
]0;gy24@remotel3: ~/cs214/projects/09/ruby[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/ruby[00m$ cat temperature.rb
# This module contains the Temperature class.
# Author: David Yoo (gy24)
# Date: 03/22/2022

module Temperatures


    class Temperature
        CELSIUS = "C"
        FAHRENHEIT = "F"
        KELVIN = "K"
        attr_accessor :degree, :scale
        

        # initialize temperature with a degree and scale
        def initialize(degree, scale)
            if not Temperature.is_scale_valid(scale)
                puts "Invalid scale"
            end
            @degree, @scale = degree, scale.upcase
        end

        # convert temperature to Celsius
        def toC
            if @scale == FAHRENHEIT
                return Temperature.new((@degree - 32) * 5.0 / 9.0, CELSIUS)
            elsif @scale == KELVIN
                return Temperature.new(@degree - 273.15, CELSIUS)
            else
                return self
            end
        end

        # convert temperature to Fahrenheit
        def toF
            if @scale == CELSIUS
                return Temperature.new((@degree * 9.0 / 5.0) + 32, FAHRENHEIT)
            elsif @scale == KELVIN
                return Temperature.new(((@degree - 273.15) * 9.0 / 5.0) + 32, FAHRENHEIT)
            else
                return self
            end
        end
        
        # convert temperature to Kelvin
        def toK
            if @scale == CELSIUS
                return Temperature.new(@degree - 273.15, KELVIN)
            elsif @scale == FAHRENHEIT
                return Temperature.new((@degree - 32) * 5.0 / 9.0 + 273.15, KELVIN)
            else
                return self
            end
        end

        # convert temperature into another scale.
        def self.convert_temp(temp, scale)
            if temp.scale == scale
                return temp
            end
            if scale == CELSIUS
                return temp.toC
            elsif scale == KELVIN
                return temp.toK
            elsif scale == FAHRENHEIT
                return temp.toF
            end
        end

        # An input operation that lets a Temperature be conveniently input as a single entity (e.g., 98.6 F).
        def self.read_temp
            input = gets.chomp
            anArray = input.split(" ")
            if anArray.length() != 2
                return nil, true
            end
            scale = anArray[1][0]
            if not Temperature.is_scale_valid(scale) or not Temperature.is_numeric(anArray[0])
                return nil, true
            end
            degree = anArray[0].to_f
            return Temperature.new(degree, scale), false
        end

        # An output operation that lets a Temperature be displayed conveniently.
        def print_temp
            print to_string
        end

        # returns the temperature in a string
        # to_s: https://apidock.com/ruby/String/to_s
        # ljust(): https://apidock.com/ruby/v2_5_5/String/ljust
        def to_string
            return ("%.3f" % @degree).to_s.ljust(8) + " " + @scale
        end

        # given a Temperature and real degrees, returns a Temperature that is degrees higher than the Temperature received.
        def raise(i)
            return Temperature.new(@degree + i, scale)
        end

        # given a Temperature and a real degrees, returns a Temperature that is degrees lower than the Temperature received. 
        def lower(i)
            return Temperature.new(@degree - i, scale)
        end

        # given two Temperature operands, returns true if and only if the left operand is equal to the right operand.
        def equals(temp)
            return @degree == Temperature.convert_temp(temp, @scale).degree
        end

        # given two Temperature operands, returns true if and only if the left operand is less-than the right operand. 
        def less_than(temp)
            return @degree < Temperature.convert_temp(temp, @scale).degree
        end

        # check if the scale is valid
        def self.is_scale_valid(scale)
            upperCase = scale.upcase
            return upperCase == CELSIUS || upperCase == FAHRENHEIT || upperCase == KELVIN
        end

        # check if the string is numeric
        def self.is_numeric(degree)
            begin
                Float(degree)
            rescue
                false
            else
                true 
            end
        end
    end
end]0;gy24@remotel3: ~/cs214/projects/09/ruby[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/ruby[00m$ cat temperature_tester.rb
# Test the temperature.rb and has the main function
# Author: David Yoo (gy24)
# Date: 03/22/2022

require './temperature'

def main
  puts "Temperature examples:"
  puts "\t20.5 C"
  puts "\t10 K"
  puts "\t35.1 F"
  print "Please enter a start temperature: "
  start, error = Temperatures::Temperature.read_temp
  while error
    print "Invalid input, please enter a valid input: "
    start, error = Temperatures::Temperature.read_temp
  end

  print " Please enter a stop temperature: "
  stop, error = Temperatures::Temperature.read_temp
  while error
    print "Invalid input, please enter a valid input: "
    stop, error = Temperatures::Temperature.read_temp
  end
  
  # NEED TO FIX THE PRINT MESSAGE, AND VARIABLE NAME
  print "Please enter a step amount of degrees: "
  step_string = gets.chomp
  step = 0.0
  while not Temperatures::Temperature.is_numeric(step_string)
    print "Invalid input, please enter a valid input: "
    step_string = gets.chomp
  end
  step = step_string.to_f

  if start.equals(stop)
    puts("Start and stop temperatures are equal.")
    return
  end
  
  current = start
  while true
    if start.less_than(stop) != current.less_than(stop) && !current.equals(stop)
      break
    end

    current.toF.print_temp
    print "\t\t"
    current.toC.print_temp
    print "\t\t"
    current.toK.print_temp
    puts ""

    if start.less_than(stop)
      current = current.raise(step)
    else
      current = current.lower(step)
    end
  end
end

main]0;gy24@remotel3: ~/cs214/projects/09/ruby[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/ruby[00m$ ruby temperature_tester.rb
Temperature examples:
	20.5 C
	10 K
	35.1 F
Please enter a start temperature: 0 F
 Please enter a stop temperature: 100 C
Please enter a step amount of degrees: 2.5
0.000    F		-17.778  C		255.372  K
2.500    F		-16.389  C		256.761  K
5.000    F		-15.000  C		258.150  K
7.500    F		-13.611  C		259.539  K
10.000   F		-12.222  C		260.928  K
12.500   F		-10.833  C		262.317  K
15.000   F		-9.444   C		263.706  K
17.500   F		-8.056   C		265.094  K
20.000   F		-6.667   C		266.483  K
22.500   F		-5.278   C		267.872  K
25.000   F		-3.889   C		269.261  K
27.500   F		-2.500   C		270.650  K
30.000   F		-1.111   C		272.039  K
32.500   F		0.278    C		273.428  K
35.000   F		1.667    C		274.817  K
37.500   F		3.056    C		276.206  K
40.000   F		4.444    C		277.594  K
42.500   F		5.833    C		278.983  K
45.000   F		7.222    C		280.372  K
47.500   F		8.611    C		281.761  K
50.000   F		10.000   C		283.150  K
52.500   F		11.389   C		284.539  K
55.000   F		12.778   C		285.928  K
57.500   F		14.167   C		287.317  K
60.000   F		15.556   C		288.706  K
62.500   F		16.944   C		290.094  K
65.000   F		18.333   C		291.483  K
67.500   F		19.722   C		292.872  K
70.000   F		21.111   C		294.261  K
72.500   F		22.500   C		295.650  K
75.000   F		23.889   C		297.039  K
77.500   F		25.278   C		298.428  K
80.000   F		26.667   C		299.817  K
82.500   F		28.056   C		301.206  K
85.000   F		29.444   C		302.594  K
87.500   F		30.833   C		303.983  K
90.000   F		32.222   C		305.372  K
92.500   F		33.611   C		306.761  K
95.000   F		35.000   C		308.150  K
97.500   F		36.389   C		309.539  K
100.000  F		37.778   C		310.928  K
102.500  F		39.167   C		312.317  K
105.000  F		40.556   C		313.706  K
107.500  F		41.944   C		315.094  K
110.000  F		43.333   C		316.483  K
112.500  F		44.722   C		317.872  K
115.000  F		46.111   C		319.261  K
117.500  F		47.500   C		320.650  K
120.000  F		48.889   C		322.039  K
122.500  F		50.278   C		323.428  K
125.000  F		51.667   C		324.817  K
127.500  F		53.056   C		326.206  K
130.000  F		54.444   C		327.594  K
132.500  F		55.833   C		328.983  K
135.000  F		57.222   C		330.372  K
137.500  F		58.611   C		331.761  K
140.000  F		60.000   C		333.150  K
142.500  F		61.389   C		334.539  K
145.000  F		62.778   C		335.928  K
147.500  F		64.167   C		337.317  K
150.000  F		65.556   C		338.706  K
152.500  F		66.944   C		340.094  K
155.000  F		68.333   C		341.483  K
157.500  F		69.722   C		342.872  K
160.000  F		71.111   C		344.261  K
162.500  F		72.500   C		345.650  K
165.000  F		73.889   C		347.039  K
167.500  F		75.278   C		348.428  K
170.000  F		76.667   C		349.817  K
172.500  F		78.056   C		351.206  K
175.000  F		79.444   C		352.594  K
177.500  F		80.833   C		353.983  K
180.000  F		82.222   C		355.372  K
182.500  F		83.611   C		356.761  K
185.000  F		85.000   C		358.150  K
187.500  F		86.389   C		359.539  K
190.000  F		87.778   C		360.928  K
192.500  F		89.167   C		362.317  K
195.000  F		90.556   C		363.706  K
197.500  F		91.944   C		365.094  K
200.000  F		93.333   C		366.483  K
202.500  F		94.722   C		367.872  K
205.000  F		96.111   C		369.261  K
207.500  F		97.500   C		370.650  K
210.000  F		98.889   C		372.039  K
]0;gy24@remotel3: ~/cs214/projects/09/ruby[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/09/ruby[00m$ exit

Script done on 2022-03-23 19:45:04-04:00 [COMMAND_EXIT_CODE="0"]
