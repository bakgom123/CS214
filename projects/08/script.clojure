Script started on 2022-03-16 23:03:51-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="271" LINES="12"]
]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ cat nameTester.clj
;;;; nameTester.clj creates and tests a clojure Name type.
;;;;
;;;; Output: results of testing Name functions.
;;;;
;;;; Usage: clojure -m nameTester
;;;;
;;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;;; Author: David Yoo (gy24)
;;;; Date: Mar 15, 2022
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns nameTester)   ; program name

;;; define a Clojure record named Name 
;;; (which compiles to a Java class).

; Replace this line with the definition of record-type Name
(defrecord Name [first middle last])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-Name constructs a Name from three strings. 
;;; Receive: firstN, middleN and lastN, three strings.
;;; Return: the Name (firstN middleN lastN). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Replace this line with a definition of function make-Name
(defn makeName [first middle last]
  (->Name first middle last)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst() extracts the first name of a Name object.
;;; Receive: aName, a Name.
;;; Return: the firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Replace this line with the definition of getFirst()
(defn getFirst [^Name name]
  (:first name)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle() extracts the middle name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
; Replace this line with the definition of getMiddle()
(defn getMiddle [^Name name]
  (:middle name)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast() extracts the last name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
; Replace this line with the definition of getLast()
(defn getLast [^Name name]
  (:last name)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setFirst sets the first name to something else.
;;; Receive: name, a Name.
;;;          first, a String
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setFirst [^Name name first]
  (->Name first (:middle name) (:last name)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setMiddle sets the middle name to something else.
;;; Receive: name, a Name.
;;;          middle, a String
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setMiddle [^Name name middle]
  (->Name (:first name) middle (:last name)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setLast sets the last name to something else.
;;; Receive: name, a Name.
;;;          last, a String
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setLast [^Name name last]
  (->Name (:first name) (:middle name) last))


; Replace this line with a definition of toString()
(defn toString [^Name name]
  (str (:first name) " " (:middle name) " " (:last name))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName() displays a name object.
;;; Receive: aName, a Name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
; Replace this line with a definition of printName()
(defn printName [^Name name]
  (let [fullName (toString name)]
    (do
      (print fullName)
      (toString name))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lfmi returns the name in format "(last), (first) (middle initial)"
;;; Receive: name, a Name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn lfmi [^Name name]
  (str (:last name) ", " (:first name) " " (first (:middle name)))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; readName reads a first, middle, and last name from the console and returns a Name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn readName []
  (let [first (read)
        middle (read)
        last (read)]
    (makeName first middle last)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Name functions. 
;;; Output: the result of testing our Name functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
      [ 
      first1 "John" middle1 "Paul" last1 "Jones" full1 "John Paul Jones"
      first2 "Jane" middle2 "Penelope" last2 "Jones" full2 "Jane Penelope Jones"
      first3 "Jinx" middle3 "Joy" last3 "Jones" full3 "Jinx Joy Jones"
                                               ; 3 ways to construct an object:
      name1 (makeName first1 middle1 last1)  ; -using our "make-" constructor
      name2 (->Name first2 middle2 last2) ; -invoking constructor directly
                                              ; -mapping field-names to values
      name3 (map->Name {:last last3 :first first3 :middle middle3})
    ]
    ;; ----- SECTION 1 -----
    (println)
    (print name1) (println)
    (assert (= (getFirst name1) "John") "getFirst(1) failed")
    (assert (= (getMiddle name1) "Paul") "getMiddle(1) failed")
    (assert (= (getLast name1) "Jones") "getLast(1) failed")
    (assert (= (toString name1) "John Paul Jones") "toString(1) failed")
    (printName name1) (println)
    ;; ----- SECTION 2 -----
    (println)
    (print name2) (println)
    (assert (= (getFirst name2) "Jane") "getFirst(2) failed")
    (assert (= (getMiddle name2) "Penelope") "getMiddle(2) failed")
    (assert (= (getLast name2) "Jones") "getLast(2) failed")
    (assert (= (toString name2) "Jane Penelope Jones") "toString(2) failed")
    (printName name2) (println)
    ;; ----- SECTION 3 -----
    (println)
    (print name3) (println)
    (assert (= (getFirst name3) "Jinx") "getFirst(3) failed")
    (assert (= (getMiddle name3) "Joy") "getMiddle(3) failed")
    (assert (= (getLast name3) "Jones") "getLast(3) failed")
    (assert (= (toString name3) "Jinx Joy Jones") "toString(3) failed")
    (printName name3) (println)

    ;; ----- SECTION 4 -----
    (let [first4 "David"
          middle4 "Gunju"
          last4 "Yoo"
          name1a (setFirst name1 first4)
          name1b (setMiddle name1 middle4)
          name1c (setLast name1 last4)]
      (assert (= (getFirst name1a) first4) "setFirst failed")
      (assert (= (getMiddle name1b) middle4) "setMiddle failed")
      (assert (= (getLast name1c) last4) "setLast failed")
      
    )

    (assert (= (lfmi name1) (str last1 ", " first1 " " (first middle1))) "lfmi failed")

    (println "\nAll tests passed!\n")

    (println "Please enter your first, middle, last name and press enter each time you enter your name):")
    (let [name4 (readName)]
      (printName name4))
      (println)
  )
)]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ clojure -m nameTester

#nameTester.Name{:first John, :middle Paul, :last Jones}
John Paul Jones

#nameTester.Name{:first Jane, :middle Penelope, :last Jones}
Jane Penelope Jones

#nameTester.Name{:first Jinx, :middle Joy, :last Jones}
Jinx Joy Jones

All tests passed!

Please enter your first, middle, last name and press enter each time you enter your name):
David     David
Gunju
Yoo
David Gunju Yoo
]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ exit

Script done on 2022-03-16 23:04:26-04:00 [COMMAND_EXIT_CODE="0"]
