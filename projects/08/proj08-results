Script started on 2022-03-16 22:14:09-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="271" LINES="12"]
]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ cat Name [KTester,[K.java
/* NameTester.java is a 'driver' to test class Name.
 * Author: David Yoo (gy24)
 * Date: Mar 15, 2022
 ************************************************************/

import java.util.Scanner;
public class NameTester  
{
  public static void main(String[] args)
  {
     Name aName = new Name("John", "Paul", "Jones");

     assert aName.getFirst().equals("John") ;
     assert aName.getMiddle().equals("Paul") ;
     assert aName.getLast().equals("Jones") ;

     System.out.println(aName);
     assert aName.toString().equals("John Paul Jones");

     aName.setFirst("David");
     assert aName.getFirst().equals("David");
	   aName.setMiddle("Gunju");
	   assert aName.getMiddle().equals("Gunju");
	   aName.setLast("Yoo");
	   assert aName.getLast().equals("Yoo");

	   assert aName.lfmi().equals("Yoo, David G");

     System.out.println("All tests passed!");
     System.out.println("Please enter your first, middle, last name and press enter each time you enter your name):");
	   aName.readName();
	   System.out.println(aName);
  }
}

// Replace this line with the declaration of class Name...
class Name
{
  private String first, middle, last;
  public Name(String first, String middle, String last){
    this.first = first;
    this.middle = middle;
    this.last = last;
  }
  public String getFirst(){
    return first;
  }
  public String getMiddle(){
    return middle;
  }
  public String getLast(){
    return last;
  }
  public String toString(){
    return first + ' ' + middle + ' ' + last;
  }
  public void setFirst(String first){
    this.first = first;
  }
  public void setMiddle(String middle){
    this.middle = middle;
  }
  public void setLast(String last){
    this.last = last;
  }
  String lfmi() {
    return last + ", " + first + ' ' + middle.charAt(0);
  }
  private Scanner scanner = new Scanner(System.in);

    
 void readName() {
    first = scanner.nextLine();
	  middle = scanner.nextLine();
	  last = scanner.nextLine();
 }
}
]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ javac -deprecation Namet[KTester.java
]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ java NameTester
John Paul Jones
All tests passed!
Please enter your first, middle, last name and press enter each time you enter your name):
David
Gunju
Yoo
David Gunju Yoo
]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ exit

Script done on 2022-03-16 22:14:48-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-16 23:44:15-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="271" LINES="12"]
]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ cat name_tester.adb
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: David Yoo (gy24)
-- Date: Mar 15, 2022
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is

  -- replace this line with the definition of NAME_SIZE
  Name_Size : constant Positive := 8;

  Chars_Read : Natural;

  -- replace this line with the definition of Name
  type Name is record 
    First, Middle, Last : String(1..Name_Size);
  end record;
  aName : Name ;


  ----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: theName, the Name variable;      -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------

  -- replace this line with the definition of Init()
  procedure Init (TheName : out Name; First, Middle, Last : in String) is
  begin
    TheName.First := First;
    TheName.Middle := Middle;
    TheName.Last := Last;
  end Init;


  ----------------------------------------------
  -- getFirst(Name) retrieves Name.myFirst        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myFirst.                  -
  ----------------------------------------------

  -- replace this line with the definition of getFirst()
  function getFirst(TheName : in Name) return String is
  begin
    return TheName.First;
  end getFirst;

  -- replace this line with the doc and def of getMiddle()
  function getMiddle(TheName : in Name) return String is
  begin
    return TheName.Middle;
  end getMiddle;

  -- replace this line with the doc and def of getLast()
  function getLast(TheName : in Name) return String is
  begin
    return TheName.Last;
  end getLast;

  -----------------------------------------------
  -- getFullName(Name) retrieves Name as a String  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of theName -
  -----------------------------------------------

  -- replace this line with the definition of getFullName()
  function getFullName(TheName : in Name) return String is
  begin
    return TheName.First & " " & TheName.Middle & " " & TheName.Last;
  end getFullName;

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------

  -- replace this line with the definition of Put()
  procedure Put (TheName : in Name) is
  begin
    Put(getFullName(TheName));
  end Put;

   ---------------------------------------------------------------
  -- SetFirst(Name, String) sets the first name of a Name.     -
  -- PRE: TheName has been initialized.                        -
  ---------------------------------------------------------------
  procedure setFirst(TheName : out Name; NewFirst : in String) is
  begin
    TheName.First := NewFirst;
  end setFirst;
  
  -----------------------------------------------------------------
  -- SetMiddle(Name, String) sets the middle name of a Name.     -
  -- PRE: TheName has been initialized.                          -
  -----------------------------------------------------------------
  procedure setMiddle(TheName : out Name; NewMiddle : in String) is
  begin
    TheName.Middle := NewMiddle;
  end setMiddle;
  
  ---------------------------------------------------------------
  -- SetLast(Name, String) sets the last name of a Name.        -
  -- PRE: TheName has been initialized.                         -
  ---------------------------------------------------------------
  procedure setLast(TheName : out Name; NewLast : in String) is
  begin
    TheName.Last := NewLast;
  end setLast;
  
  -------------------------------------------------------------------------------
  -- LFMI(Name) returns the name in the order of "last, first middle initial".  -
  -- PRE: TheName has been initialized.                                         -
  -- Receive: TheName, a Name.                                                  - 
  -------------------------------------------------------------------------------
  function LFMI(TheName : in Name) return String is
  begin
    return TheName.Last & ", " & TheName.First & ' ' & TheName.Middle(TheName.Middle'First);
  end LFMI;
  
  --------------------------------------------------------------------------------
  -- ReadName reads a first, middle and last name from the console into a Name. -
  -- PRE: The_Name has been initialized.                                        -
  -- Receive: TheName, a Name.                                                  -
  --------------------------------------------------------------------------------
  procedure ReadName(TheName : out Name) is
  begin
    TheName.First := (others => ' ');
    TheName.Middle := (others => ' ');
    TheName.Last := (others => ' ');
    Get_Line(TheName.First, Chars_Read);
    Get_Line(TheName.Middle, Chars_Read);
    Get_Line(TheName.Last, Chars_Read);
  end ReadName;



begin
   Init(aName, "John    ", "Paul    ", "Jones   ");

   pragma Assert( getFirst(aName) = "John    ", "getFirst() failed");
   pragma Assert( getMiddle(aName) = "Paul    ", "getMiddle() failed");
   pragma Assert( getLast(aName) = "Jones   ", "getLast() failed");
   pragma Assert( getFullName(aName) = "John     Paul     Jones   ", 
                    "getFullName() failed");

  setFirst(aName, "David   ");
  pragma Assert(getFirst(aName) = "David   ", "setFirst failed");
  setMiddle(aName, "Gunju   ");
  pragma Assert(getMiddle(aName) = "Gunju   ", "setMiddle failed");
  setLast(aName, "Yoo     ");
  pragma Assert(getLast(aName) = "Yoo     ", "setLast failed");
  pragma Assert(LFMI(aName) = "Yoo     , David   G", "LMFI failed!");
  
  Put("All tests passed!"); New_line;
  
  Put("Please enter your first, middle, last name and press enter each time you enter your name):"); New_Line;
  ReadName(aName);
  Put(aName);
end name_tester;]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ gnatmake name_tester
gnatmake: "name_tester" up to date.
]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ ./name_ts[Kester
All tests passed!
Please enter your first, middle, last name and press enter each time you enter your name):
David
Gunju
Yoo
David    Gunju    Yoo     
]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ exit

Script done on 2022-03-16 23:45:10-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-16 23:03:51-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="271" LINES="12"]
]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ cat nameTester.clj
;;;; nameTester.clj creates and tests a clojure Name type.
;;;;
;;;; Output: results of testing Name functions.
;;;;
;;;; Usage: clojure -m nameTester
;;;;
;;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;;; Author: David Yoo (gy24)
;;;; Date: Mar 15, 2022
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns nameTester)   ; program name

;;; define a Clojure record named Name 
;;; (which compiles to a Java class).

; Replace this line with the definition of record-type Name
(defrecord Name [first middle last])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-Name constructs a Name from three strings. 
;;; Receive: firstN, middleN and lastN, three strings.
;;; Return: the Name (firstN middleN lastN). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Replace this line with a definition of function make-Name
(defn makeName [first middle last]
  (->Name first middle last)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst() extracts the first name of a Name object.
;;; Receive: aName, a Name.
;;; Return: the firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Replace this line with the definition of getFirst()
(defn getFirst [^Name name]
  (:first name)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle() extracts the middle name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
; Replace this line with the definition of getMiddle()
(defn getMiddle [^Name name]
  (:middle name)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast() extracts the last name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
; Replace this line with the definition of getLast()
(defn getLast [^Name name]
  (:last name)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setFirst sets the first name to something else.
;;; Receive: name, a Name.
;;;          first, a String
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setFirst [^Name name first]
  (->Name first (:middle name) (:last name)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setMiddle sets the middle name to something else.
;;; Receive: name, a Name.
;;;          middle, a String
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setMiddle [^Name name middle]
  (->Name (:first name) middle (:last name)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setLast sets the last name to something else.
;;; Receive: name, a Name.
;;;          last, a String
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setLast [^Name name last]
  (->Name (:first name) (:middle name) last))


; Replace this line with a definition of toString()
(defn toString [^Name name]
  (str (:first name) " " (:middle name) " " (:last name))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName() displays a name object.
;;; Receive: aName, a Name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
; Replace this line with a definition of printName()
(defn printName [^Name name]
  (let [fullName (toString name)]
    (do
      (print fullName)
      (toString name))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lfmi returns the name in format "(last), (first) (middle initial)"
;;; Receive: name, a Name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn lfmi [^Name name]
  (str (:last name) ", " (:first name) " " (first (:middle name)))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; readName reads a first, middle, and last name from the console and returns a Name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn readName []
  (let [first (read)
        middle (read)
        last (read)]
    (makeName first middle last)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Name functions. 
;;; Output: the result of testing our Name functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
      [ 
      first1 "John" middle1 "Paul" last1 "Jones" full1 "John Paul Jones"
      first2 "Jane" middle2 "Penelope" last2 "Jones" full2 "Jane Penelope Jones"
      first3 "Jinx" middle3 "Joy" last3 "Jones" full3 "Jinx Joy Jones"
                                               ; 3 ways to construct an object:
      name1 (makeName first1 middle1 last1)  ; -using our "make-" constructor
      name2 (->Name first2 middle2 last2) ; -invoking constructor directly
                                              ; -mapping field-names to values
      name3 (map->Name {:last last3 :first first3 :middle middle3})
    ]
    ;; ----- SECTION 1 -----
    (println)
    (print name1) (println)
    (assert (= (getFirst name1) "John") "getFirst(1) failed")
    (assert (= (getMiddle name1) "Paul") "getMiddle(1) failed")
    (assert (= (getLast name1) "Jones") "getLast(1) failed")
    (assert (= (toString name1) "John Paul Jones") "toString(1) failed")
    (printName name1) (println)
    ;; ----- SECTION 2 -----
    (println)
    (print name2) (println)
    (assert (= (getFirst name2) "Jane") "getFirst(2) failed")
    (assert (= (getMiddle name2) "Penelope") "getMiddle(2) failed")
    (assert (= (getLast name2) "Jones") "getLast(2) failed")
    (assert (= (toString name2) "Jane Penelope Jones") "toString(2) failed")
    (printName name2) (println)
    ;; ----- SECTION 3 -----
    (println)
    (print name3) (println)
    (assert (= (getFirst name3) "Jinx") "getFirst(3) failed")
    (assert (= (getMiddle name3) "Joy") "getMiddle(3) failed")
    (assert (= (getLast name3) "Jones") "getLast(3) failed")
    (assert (= (toString name3) "Jinx Joy Jones") "toString(3) failed")
    (printName name3) (println)

    ;; ----- SECTION 4 -----
    (let [first4 "David"
          middle4 "Gunju"
          last4 "Yoo"
          name1a (setFirst name1 first4)
          name1b (setMiddle name1 middle4)
          name1c (setLast name1 last4)]
      (assert (= (getFirst name1a) first4) "setFirst failed")
      (assert (= (getMiddle name1b) middle4) "setMiddle failed")
      (assert (= (getLast name1c) last4) "setLast failed")
      
    )

    (assert (= (lfmi name1) (str last1 ", " first1 " " (first middle1))) "lfmi failed")

    (println "\nAll tests passed!\n")

    (println "Please enter your first, middle, last name and press enter each time you enter your name):")
    (let [name4 (readName)]
      (printName name4))
      (println)
  )
)]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ clojure -m nameTester

#nameTester.Name{:first John, :middle Paul, :last Jones}
John Paul Jones

#nameTester.Name{:first Jane, :middle Penelope, :last Jones}
Jane Penelope Jones

#nameTester.Name{:first Jinx, :middle Joy, :last Jones}
Jinx Joy Jones

All tests passed!

Please enter your first, middle, last name and press enter each time you enter your name):
David     David
Gunju
Yoo
David Gunju Yoo
]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ exit

Script done on 2022-03-16 23:04:26-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-17 00:40:15-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="271" LINES="12"]
]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ cat nameTester.rb
# NameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: David Yoo (gy24)
# Date: Mar 15, 2022
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

# Replace this line with the declaration of class Name
class Name
   def initialize (first, middle, last)
      @first, @middle, @last = first, middle, last
   end
   attr_reader :first, :middle, :last
   def fullName
      @first + " " + @middle + " " + @last
   end
   def print
      puts fullName
      fullName
   end
   def lfmi
    return @last + ", " + @first + " " + @middle[0]
   end
   def readName
    @first = gets.chomp
    @middle = gets.chomp
    @last = gets.chomp
   end
   attr_accessor :first, :middle, :last
end


def testName
  name = Name.new("John", "Paul", "Jones")

  assert name.first == "John", "first failed"
  assert name.middle == "Paul", "middle failed"
  assert name.last == "Jones", "last failed"
  assert name.fullName == "John Paul Jones", "fullName failed"
  assert name.print == "John Paul Jones", "print failed"

  assert name.first = "David"
  assert name.first == "David", "setting first name failed"
  assert name.middle = "Gunju"
  assert name.middle == "Gunju", "setting middle name failed"
  assert name.last = "Yoo"
  assert name.last == "Yoo", "setting last name failed"

  assert name.lfmi == "Yoo, David G", "lfmi failed"
   
  print "All tests passed!\n"
  print "Please enter your first, middle, last name and press enter each time you enter your name):"
  name.readName
  puts name.fullName
end

testName

]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ ruby nameTester.rb
John Paul Jones
All tests passed!
Please enter your first, middle, last name and press enter each time you enter your name):David
Gunju
Yoo
David Gunju Yoo
]0;gy24@remotel3: ~/cs214/projects/08[01;32mgy24@remotel3[00m:[01;34m~/cs214/projects/08[00m$ exit

Script done on 2022-03-17 00:40:56-04:00 [COMMAND_EXIT_CODE="0"]
